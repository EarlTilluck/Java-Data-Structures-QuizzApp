package dsproject;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.NoSuchElementException;
import java.util.Scanner;
import javax.swing.JOptionPane;


/**
 *
 * @author Khandine, Earl, Jared
 */
public class QuestionBank extends javax.swing.JFrame {

    // a binary tree for multiple choice and true false questions
    private BinaryTree mcbt;
    private BinaryTree tfbt; 
    
    // writer for output
    private PrintWriter out;
    
    /**
     * Creates new form QuestionBank
     */
    public QuestionBank() {
        initComponents();
        
        // make window appear in center of screen
        this.setLocationRelativeTo(null);
        
        // init text boxes
        mcTxt.setText("");
        mcTxt.setText("");
        
        // init binary trees
        mcbt = new BinaryTree();
        tfbt = new BinaryTree();
        
        // read the two question files and add them to binary trees
        readTrueFalseFile();
        readMultipleChoiceFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        mcCBox = new javax.swing.JCheckBox();
        tfCBox = new javax.swing.JCheckBox();
        mcTxt = new javax.swing.JTextField();
        tfTxt = new javax.swing.JTextField();
        generateBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        quesTxtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QUESTION BANK");

        jLabel1.setText("Please select the type/s of questions you would like to generate ");

        jLabel2.setText("and enter the number of questions needed.");

        mcCBox.setText("Multiple Choice");

        tfCBox.setText("True/False");

        generateBtn.setText("Generate Questions");
        generateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBtnActionPerformed(evt);
            }
        });

        quesTxtArea.setEditable(false);
        quesTxtArea.setColumns(20);
        quesTxtArea.setRows(5);
        jScrollPane1.setViewportView(quesTxtArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(generateBtn, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mcCBox)
                                    .addComponent(tfCBox))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(mcTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                                    .addComponent(tfTxt))))
                        .addGap(0, 205, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mcCBox)
                    .addComponent(mcTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCBox)
                    .addComponent(tfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(generateBtn)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    /*
        Action Performed for generate button
    */
    private void generateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBtnActionPerformed
        
        // set text area to blank
        quesTxtArea.setText(null);
        int count_tf = tfbt.count;
        int count_mc = mcbt.count;
        
        // check if multiple choice selected and perform actions 
        // to insert questions
        if (mcCBox.isSelected()) {
            
            // get value from text box
            String amount = mcTxt.getText();
            
            // try to parse the value from txtbox into an integer.
            int amt;
            try {
                amt = Integer.parseInt(amount);
                // verify if the number is in the acceptable range, 
                if (amt > count_mc) {
                    // showError displays an error message in a window
                    showError("Warning", 
                            "There are not enough questions in the "
                      + "multiple choice bank.\nPlease choose another number");
                } else if(amt <= 0) {
                    showError("Warning",
                            "Invalid input for Multiple Choice.\nPlease "
                            + "enter a positive integer number");
                } else {
                    // at this point we have a valid number,
                    // we can call the method to retreive questions
                    // from the multiple choice binary tree
                    getRandomSet(mcbt, amt);
                }
            } catch (NumberFormatException e) {
                // if value is blank or not an integer, then an error is shown.
                showError("Warning",
                        "Invalid input for Multiple Choice\nPlease "
                        + "enter an integer number.");
            }
        }
        
        // do the same for true false 
        if (tfCBox.isSelected()) {
            String amount = tfTxt.getText();
            int amt;
            try {
                amt = Integer.parseInt(amount);
                if (amt > count_tf) {
                    showError("Warning", 
                            "There are not enough questions in the "
                            + "true/false bank.\nPlease choose another number");
                } else if(amt <= 0) {
                    showError("Warning",
                            "Invalid input for True/False.\nPlease "
                            + "enter a positive integer number");
                } else {
                    // we retrieve from the true false binary tree instead.
                    getRandomSet(tfbt, amt);
                }
            } catch (NumberFormatException e) {
                showError("Warning",
                        "Invalid input for True/False\nPlease "
                        + "enter an integer number.");
            }
        }
        
        // save the data to the text file
        try {
            out = new PrintWriter (new FileWriter("Questions Output.txt"));
            out.println(quesTxtArea.getText());
            out.flush();
            out.close();
        } catch (IOException ex) {
            showError("File Save Error",
                    "Error saving information to text file.");
        } 
        
    }//GEN-LAST:event_generateBtnActionPerformed


    /*
        Main method, 
        starts the GUI
    */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuestionBank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuestionBank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuestionBank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuestionBank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuestionBank().setVisible(true);
            }
        });
    }
    
    /*
        read True False file
        Attempts to read the true false data, then
        populates the binary tree with its information
    */
    public void readTrueFalseFile() {
        
        // prepare scanner
        Scanner in;
        
        // try to read the file, catch exceptions
        try{
            
            in = new Scanner(new FileReader("true_false.txt"));
            String question, answer;
            NodeData nd;
            int qnum = 0;

            /*
                loop through each line and read data
                expected input:
                
                question one
                True
                question two
                false
                ...
            
            */
            while(in.hasNext()){ 
                try {
                    
                    // increment question number
                    qnum++;
                    
                    //question and answer
                    question = in.nextLine();
                    answer = in.nextLine();
                    
                    //create the new question object
                    TrueFalse trueFalse = new TrueFalse (question, answer);
                    nd = new NodeData(trueFalse);
                    
                    // then insert into binary tree
                   tfbt.balancedInsert(qnum, nd);
                   
                } catch (NoSuchElementException e) {
                    /*
                        if we reach the end of the file without completing a 
                        question, then this exception is thrown.
                        At this point we do nothing and the outer while loop
                        will close
                    */
                    showError("Warning", 
                            "End of True False file reached "
                                    + "with incomplete question.");
                }
            }
            
            // close scanner
            in.close();
            
        }catch(FileNotFoundException e){
            showError("File Not Found", 
                    "Could not find or open true_false.txt");
        }
    }//end ReadTrueFalseFile
    
    
    
    /*
        read Multiple choice file
        Attempts to read the true false data, then
        populates the binary tree with its information
    */
    public void readMultipleChoiceFile() {
        
        // prepare scanner
        Scanner in;
        
        // try to read the file, catch exceptions
        try{
            
            in = new Scanner(new FileReader("multiple.txt"));
            String question, a, b, c, d, answer;
            NodeData nd;
            int qnum = 0;

            /*
                loop through each line and read data
                expected input:
                
                question one
                a
                b
                c
                d
                answer
                ...
            
            */
            while(in.hasNext()){ 
                try {
                    
                    // increment question number
                    qnum++;
                    
                    //question and answers
                    question = in.nextLine();
                    a = in.nextLine();
                    b = in.nextLine();
                    c = in.nextLine();
                    d = in.nextLine();
                    answer = in.nextLine();
                    
                    //create the new question object
                    MultipleChoice multiple = new MultipleChoice (
                            question, a, b, c, d, answer);
                    
                    nd = new NodeData(multiple);
                    
                    // then insert into binary tree
                   mcbt.balancedInsert(qnum, nd);
                   
                } catch (NoSuchElementException e) {
                    /*
                        if we reach the end of the file without completing a 
                        question, then this exception is thrown.
                        At this point we do nothing and the outer while loop
                        will close
                    */
                    showError("Warning", 
                            "End of Multiple Choice file reached with "
                                    + "incomplete question.");
                }
            }
            
            // close scanner
            in.close();
            
        }catch(FileNotFoundException e){
            showError("File Not Found", 
                    "Could not find or open multiple.txt");
        }        
        
    }//end ReadMultipleChoiceFile
    

    

    /*
        This method retrieves random questions from the specified binary
        tree. 
        It takes in a value for the binary tree as well as the number
        of questions to return
    */
    public void getRandomSet(BinaryTree bt, int num) {
        // create new question selector, passing in the number of 
        // questions present in the binary tree
        QuestionSelector qs = new QuestionSelector(bt.count);
        
        // loop and find *num* random, non repeated questions
        for (int i=1; i<=num; i++) {
            int qnum = qs.getNextRandom();
            quesTxtArea.append(i + System.getProperty("line.separator") 
                    + bt.find(qnum).toString());
        }
        
    }//end randomTrueFalse method
    
       
    
    /*
        Helper method to show an error using JOptionPane
    */
    public void showError(String title, String err) {
        JOptionPane.showMessageDialog (
                null, err, title, JOptionPane.ERROR_MESSAGE);
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generateBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox mcCBox;
    private javax.swing.JTextField mcTxt;
    private javax.swing.JTextArea quesTxtArea;
    private javax.swing.JCheckBox tfCBox;
    private javax.swing.JTextField tfTxt;
    // End of variables declaration//GEN-END:variables
}
